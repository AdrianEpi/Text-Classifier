.TH "PreProcesser" 3 "Fri May 14 2021" "Version 2.1.0" "Text-Classifier" \" -*- nroff -*-
.ad l
.nh
.SH NAME
PreProcesser \- This class describes a pre processer, it makes possible to preprocess data files before using them\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <preProcesser\&.hpp>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBPreProcesser\fP (void)"
.br
.RI "Constructs a new instance\&. "
.ti -1c
.RI "\fBPreProcesser\fP (std::string inputFile, std::string outpuFile)"
.br
.RI "Constructs a new instance\&. "
.ti -1c
.RI "\fB~PreProcesser\fP (void)"
.br
.RI "Destroys the object\&. "
.ti -1c
.RI "std::string \fBget_InputFile\fP (void) const"
.br
.RI "Gets the input file\&. "
.ti -1c
.RI "std::string \fBget_OutputFile\fP (void) const"
.br
.RI "Gets the output file\&. "
.ti -1c
.RI "std::string \fBget_Data\fP (void) const"
.br
.RI "Gets the data\&. "
.ti -1c
.RI "void \fBset_InputFile\fP (std::string newInputFile)"
.br
.RI "Sets the input file\&. "
.ti -1c
.RI "void \fBset_OutputFile\fP (std::string newOutputFile)"
.br
.RI "Sets the output file\&. "
.ti -1c
.RI "void \fBset_Data\fP (std::string newData)"
.br
.RI "Sets the data\&. "
.ti -1c
.RI "\fBPreProcesser\fP & \fBoperator=\fP (const \fBPreProcesser\fP &newPreProcesser)"
.br
.RI "Assignment operator\&. "
.ti -1c
.RI "void \fBconvertLowerCase\fP (std::string &str)"
.br
.RI "Converts all the str into Lower Case\&. "
.ti -1c
.RI "void \fBconvertLowerCase\fP (void)"
.br
.RI "Converts all the data into Lower Case\&. "
.ti -1c
.RI "void \fBconvertUpperCase\fP (std::string &str)"
.br
.RI "Converts all the str into Upper Case\&. "
.ti -1c
.RI "void \fBconvertUpperCase\fP (void)"
.br
.RI "Converts all the data into Upper Case\&. "
.ti -1c
.RI "void \fBeraseReservedWords\fP (std::vector< std::string > &reservedWords, std::string &fileName)"
.br
.RI "Deletes all the words from the vector in the given file and stores them into the same file\&. "
.ti -1c
.RI "std::string \fBeraseReservedWords\fP (std::string &sentence, std::vector< std::string > &reservedWords)"
.br
.RI "Deletes all the words from the vector in the given string and returns it\&. "
.ti -1c
.RI "void \fBerasePunctuationSigns\fP (std::string &str)"
.br
.RI "Erases all punctuation sings into readed data\&. "
.ti -1c
.RI "void \fBerasePunctuationSigns\fP (void)"
.br
.RI "Erases all punctuation sings into readed data\&. "
.ti -1c
.RI "void \fBeraseURLs\fP (std::string &str)"
.br
.RI "Erases all URLs into data var, an URL is defined as a '\&.' between letters without spaces\&. "
.ti -1c
.RI "void \fBeraseURLs\fP (void)"
.br
.RI "Erases all URLs into data var, an URL is defined as a '\&.' between letters without spaces\&. (Careful with float numbers) "
.ti -1c
.RI "void \fBeraseHashtags\fP (std::string &str)"
.br
.RI "Erases all Hashtags into data var\&. "
.ti -1c
.RI "void \fBeraseHashtags\fP (void)"
.br
.RI "Erases all Hashtags into data var\&. "
.ti -1c
.RI "void \fBeraseNumbers\fP (std::string &str)"
.br
.RI "Erases all numbers and characters form a readen number till next space\&. "
.ti -1c
.RI "void \fBeraseNumbers\fP (void)"
.br
.RI "Erases all numbers and characters form a readen number till next space\&. "
.ti -1c
.RI "void \fBeraseAllNumbers\fP (void)"
.br
.RI "Erases all words that contains numbers and all numbers in data\&. "
.ti -1c
.RI "void \fBeraseAllNumbers\fP (std::string &str)"
.br
.RI "Erases all words that contains numbers and all numbers in given string\&. "
.ti -1c
.RI "int \fBloadData\fP (std::string &inputFile, std::string dataType)"
.br
.RI "Loads the data that starts with the dataTpe from input file into data var\&. "
.ti -1c
.RI "void \fBloadTestData\fP (std::string &inputFile)"
.br
.RI "Loads the test data\&. "
.ti -1c
.RI "void \fBprintData\fP (void)"
.br
.RI "Prints data var\&. "
.ti -1c
.RI "void \fBstoreData\fP (std::string &outputFile, int dataLines)"
.br
.RI "Stores the data into the given file\&. "
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "std::string \fBinputFile_\fP"
.br
.ti -1c
.RI "std::string \fBoutputFile_\fP"
.br
.ti -1c
.RI "std::string \fBdata_\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class describes a pre processer, it makes possible to preprocess data files before using them\&. 
.PP
Definition at line 39 of file preProcesser\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "PreProcesser::PreProcesser (std::string inputFile, std::string outpuFile)"

.PP
Constructs a new instance\&. 
.PP
\fBParameters\fP
.RS 4
\fIinputFile\fP The input file 
.br
\fIoutpuFile\fP The outpu file 
.RE
.PP

.PP
Definition at line 43 of file preProcesser\&.cpp\&.
.PP
.nf
43                                                                     {
44     set_InputFile(inputFile);
45     set_OutputFile(outpuFile);
46     set_Data("");
47 }
.fi
.SH "Member Function Documentation"
.PP 
.SS "void PreProcesser::convertLowerCase (std::string & str)"

.PP
Converts all the str into Lower Case\&. 
.PP
\fBParameters\fP
.RS 4
\fIstr\fP The string 
.RE
.PP

.PP
Definition at line 128 of file preProcesser\&.cpp\&.
.PP
.nf
128                                                    {
129     set_Data(str);
130     convertLowerCase();
131     str = get_Data();
132 }
.fi
.SS "void PreProcesser::convertUpperCase (std::string & str)"

.PP
Converts all the str into Upper Case\&. 
.PP
\fBParameters\fP
.RS 4
\fIstr\fP The string 
.RE
.PP

.PP
Definition at line 146 of file preProcesser\&.cpp\&.
.PP
.nf
146                                                    {
147     set_Data(str);
148     convertUpperCase();
149     str = get_Data();
150 }
.fi
.SS "void PreProcesser::eraseAllNumbers (std::string & str)"

.PP
Erases all words that contains numbers and all numbers in given string\&. 
.PP
\fBParameters\fP
.RS 4
\fIstr\fP The string 
.RE
.PP

.PP
Definition at line 373 of file preProcesser\&.cpp\&.
.PP
.nf
373                                                   {
374     set_Data(str);
375     eraseAllNumbers();
376     str = get_Data();
377 }
.fi
.SS "void PreProcesser::eraseHashtags (std::string & str)"

.PP
Erases all Hashtags into data var\&. 
.PP
\fBParameters\fP
.RS 4
\fIstr\fP The string 
.RE
.PP

.PP
Definition at line 283 of file preProcesser\&.cpp\&.
.PP
.nf
283                                                 {
284     set_Data(str);
285     eraseHashtags();
286     str = get_Data();
287 }
.fi
.SS "void PreProcesser::eraseHashtags (void)"

.PP
Erases all Hashtags into data var\&. 
.PP
Definition at line 293 of file preProcesser\&.cpp\&.
.PP
.nf
293                                       {
294     for (unsigned i = 0; i < data_\&.length(); i++) {
295         if (data_[i] == '#') {
296             data_[i] = ' ';
297             while (data_[i] != ' ') {
298                 data_[i] = ' ';
299                 i++;
300             }
301         }
302     }
303 }
.fi
.SS "void PreProcesser::eraseNumbers (std::string & str)"

.PP
Erases all numbers and characters form a readen number till next space\&. 
.PP
\fBParameters\fP
.RS 4
\fIstr\fP The string 
.RE
.PP

.PP
Definition at line 311 of file preProcesser\&.cpp\&.
.PP
.nf
311                                                {
312     set_Data(str);
313     eraseNumbers();
314     str = get_Data();
315 }
.fi
.SS "void PreProcesser::erasePunctuationSigns (std::string & str)"

.PP
Erases all punctuation sings into readed data\&. 
.PP
\fBParameters\fP
.RS 4
\fIstr\fP The string 
.RE
.PP

.PP
Definition at line 229 of file preProcesser\&.cpp\&.
.PP
.nf
229                                                         {
230     set_Data(str);
231     erasePunctuationSigns();
232     str = get_Data();
233 }
.fi
.SS "std::string PreProcesser::eraseReservedWords (std::string & sentence, std::vector< std::string > & reservedWords)"

.PP
Deletes all the words from the vector in the given string and returns it\&. 
.PP
\fBParameters\fP
.RS 4
\fIreservedWords\fP The reserved words vector 
.br
\fIsentence\fP The sentence
.RE
.PP
\fBReturns\fP
.RS 4
The string without the reserved words\&. 
.RE
.PP

.PP
Definition at line 200 of file preProcesser\&.cpp\&.
.PP
.nf
200                                                                                                     {
201     std::string result = "";
202     std::string tmp = "";
203     for (unsigned j = 0; j < sentence\&.length(); j++) {
204         if (sentence[j] != ' ' && sentence[j] != '\t') {
205             tmp += sentence[j];
206         }
207         else {
208             bool push = true;
209             for (unsigned i = 0; i < reservedWords\&.size(); i++) {
210                 if (tmp == reservedWords[i]) {
211                     push = false;
212                     break;
213                 }
214             }
215             if (push) {
216                 result += tmp + " ";
217             }
218             tmp = "";
219         }
220     }
221     return result;
222 }
.fi
.SS "void PreProcesser::eraseReservedWords (std::vector< std::string > & reservedWords, std::string & fileName)"

.PP
Deletes all the words from the vector in the given file and stores them into the same file\&. 
.PP
\fBParameters\fP
.RS 4
\fIreservedWords\fP The reserved words vector 
.br
\fIfileName\fP The file name 
.RE
.PP

.PP
Definition at line 166 of file preProcesser\&.cpp\&.
.PP
.nf
166                                                                                                {
167     std::ifstream file(fileName, std::ios::in);
168     data_ = "";
169     if (file\&.fail()) {
170         std::cout << std::endl << "Error 404, file not found in eraseReservedWords function\&." << std::endl;
171         exit(1);
172     }
173     std::string aux = "";
174     while (!file\&.eof()) {
175         file >> aux;
176         bool push = true;
177         for (unsigned i = 0; i < reservedWords\&.size(); i++) {
178             if (aux == reservedWords[i]) {
179                 push = false;
180                 break;
181             }
182         }
183         if (push) {
184             data_ += ' ' + aux;
185         }
186     }
187     file\&.close();
188     storeData(fileName, 0);
189 }
.fi
.SS "void PreProcesser::eraseURLs (std::string & str)"

.PP
Erases all URLs into data var, an URL is defined as a '\&.' between letters without spaces\&. 
.PP
\fBParameters\fP
.RS 4
\fIstr\fP The string 
.RE
.PP

.PP
Definition at line 252 of file preProcesser\&.cpp\&.
.PP
.nf
252                                             {
253     set_Data(str);
254     eraseURLs();
255     str = get_Data();
256 }
.fi
.SS "std::string PreProcesser::get_Data (void) const"

.PP
Gets the data\&. 
.PP
\fBReturns\fP
.RS 4
The data\&. 
.RE
.PP

.PP
Definition at line 78 of file preProcesser\&.cpp\&.
.PP
.nf
78                                             {
79     return data_;
80 }
.fi
.SS "std::string PreProcesser::get_InputFile (void) const"

.PP
Gets the input file\&. 
.PP
\fBReturns\fP
.RS 4
The input file\&. 
.RE
.PP

.PP
Definition at line 60 of file preProcesser\&.cpp\&.
.PP
.nf
60                                                  {
61     return inputFile_;
62 }
.fi
.SS "std::string PreProcesser::get_OutputFile (void) const"

.PP
Gets the output file\&. 
.PP
\fBReturns\fP
.RS 4
The output file\&. 
.RE
.PP

.PP
Definition at line 69 of file preProcesser\&.cpp\&.
.PP
.nf
69                                                   {
70     return outputFile_;
71 }
.fi
.SS "int PreProcesser::loadData (std::string & inputFile, std::string dataType)"

.PP
Loads the data that starts with the dataTpe from input file into data var\&. 
.PP
\fBParameters\fP
.RS 4
\fIinputFile\fP The input file 
.br
\fIdataType\fP The data type that wants to be loaded (must be the first word per line)
.RE
.PP
\fBReturns\fP
.RS 4
Data lines included\&. 
.RE
.PP

.PP
Definition at line 389 of file preProcesser\&.cpp\&.
.PP
.nf
389                                                                     {
390     data_ = "";
391     int dataLines = 0;
392     std::ifstream file(inputFile, std::ios::in);
393     if (file\&.fail()) {
394         std::cout << std::endl << "Error 404, file not found in loadData function\&." << std::endl;
395         exit(1);
396     }
397     std::string aux = "";
398     while (!file\&.eof()) {
399         file >> aux;
400         if (dataType == "" ) {
401             data_ += aux + " ";
402             std::getline(file, aux);
403             data_ += aux;
404             dataLines++;
405         }
406         else {
407             if (aux\&.length() < dataType\&.length()) {
408                 std::string spacedName = "";
409                 while (aux\&.length() < dataType\&.length()) {
410                     file >> spacedName;
411                     aux += " " + spacedName;
412                 }
413             }
414             std::string readedType = aux\&.substr(0, dataType\&.length());
415             aux = aux\&.substr(dataType\&.length(), aux\&.length());
416             std::getline(file, aux);
417             if (readedType == dataType) {               
418                 data_ += aux;
419                 dataLines++;
420             }
421         }
422         
423     }
424     file\&.close();
425     return dataLines;
426 }
.fi
.SS "void PreProcesser::loadTestData (std::string & inputFile)"

.PP
Loads the test data\&. 
.PP
\fBParameters\fP
.RS 4
\fIinputFile\fP The input file 
.RE
.PP

.PP
Definition at line 433 of file preProcesser\&.cpp\&.
.PP
.nf
433                                                      {
434     data_ = "";
435     const std::string ENDL = " PREPROCESSERENDL "; // Var that is going to be used in classifier to detects the end of a line
436     std::ifstream file(inputFile, std::ios::in);
437     if (file\&.fail()) {
438         std::cout << std::endl << "Error 404, file not found in loadTestData function\&." << std::endl;
439         exit(1);
440     }
441     std::string aux = "";
442     while (!file\&.eof()) {
443         std::getline(file, aux);
444         data_ += aux + ENDL;    
445     }
446     file\&.close();
447 }
.fi
.SS "\fBPreProcesser\fP & PreProcesser::operator= (const \fBPreProcesser\fP & newPreProcesser)"

.PP
Assignment operator\&. 
.PP
\fBParameters\fP
.RS 4
\fInewPreProcesser\fP The new pre processer
.RE
.PP
\fBReturns\fP
.RS 4
The result of the assignment 
.RE
.PP

.PP
Definition at line 116 of file preProcesser\&.cpp\&.
.PP
.nf
116                                                                           {
117     this -> set_Data(newPreProcesser\&.get_Data());
118     this -> set_OutputFile(newPreProcesser\&.get_OutputFile());
119     this -> set_InputFile(newPreProcesser\&.get_InputFile());
120     return *this;
121 }
.fi
.SS "void PreProcesser::set_Data (std::string newData)"

.PP
Sets the data\&. 
.PP
\fBParameters\fP
.RS 4
\fInewData\fP The new data 
.RE
.PP

.PP
Definition at line 105 of file preProcesser\&.cpp\&.
.PP
.nf
105                                               {
106     data_ = newData;
107 }
.fi
.SS "void PreProcesser::set_InputFile (std::string newInputFile)"

.PP
Sets the input file\&. 
.PP
\fBParameters\fP
.RS 4
\fInewInputFile\fP The new input file 
.RE
.PP

.PP
Definition at line 87 of file preProcesser\&.cpp\&.
.PP
.nf
87                                                         {
88     inputFile_ = newInputFile;
89 }
.fi
.SS "void PreProcesser::set_OutputFile (std::string newOutputFile)"

.PP
Sets the output file\&. 
.PP
\fBParameters\fP
.RS 4
\fInewOutputFile\fP The new output file 
.RE
.PP

.PP
Definition at line 96 of file preProcesser\&.cpp\&.
.PP
.nf
96                                                           {
97     outputFile_ = newOutputFile;
98 }
.fi
.SS "void PreProcesser::storeData (std::string & outputFile, int dataLines)"

.PP
Stores the data into the given file\&. 
.PP
\fBParameters\fP
.RS 4
\fIoutputFile\fP The output file 
.br
\fIdataLines\fP The data lines 
.RE
.PP

.PP
Definition at line 462 of file preProcesser\&.cpp\&.
.PP
.nf
462                                                                  {
463     std::fstream file(outputFile, std::ios::out | std::ios::trunc);
464     
465     if (file\&.fail()) {
466         std::cout << "Error while storing data \"" << outputFile << "\" is not valid document" << std::endl;
467         exit(1);
468     } 
469     else { 
470         if (dataLines != 0) {
471             file << dataLines << std::endl;
472         }
473         file << data_;
474     }
475     file\&.close();
476 }
.fi


.SH "Author"
.PP 
Generated automatically by Doxygen for Text-Classifier from the source code\&.
